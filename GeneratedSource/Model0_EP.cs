// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Math;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2301.301 at 4:37PM on Wednesday, October 15, 2025.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Messages from uses of 'c_index0__selector'</summary>
		public Discrete[][] c_index0__selector_uses_B;
		/// <summary>Message to marginal of 'c'</summary>
		public DistributionRefArray<Discrete,int> c_marginal_F;
		/// <summary>Message to use of 'c'</summary>
		public DistributionRefArray<Discrete,int> c_use_F;
		/// <summary>True if Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x has executed. Set this to false to force re-execution of Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x</summary>
		public bool Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x</summary>
		public bool Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x</summary>
		public bool Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isInitialised;
		/// <summary>True if Changed_vBeta____0 has executed. Set this to false to force re-execution of Changed_vBeta____0</summary>
		public bool Changed_vBeta____0_isDone;
		/// <summary>True if Changed_vBeta____0_vBeta2 has executed. Set this to false to force re-execution of Changed_vBeta____0_vBeta2</summary>
		public bool Changed_vBeta____0_vBeta2_isDone;
		/// <summary>True if Changed_vDirichlet1 has executed. Set this to false to force re-execution of Changed_vDirichlet1</summary>
		public bool Changed_vDirichlet1_isDone;
		/// <summary>True if Changed_vint0 has executed. Set this to false to force re-execution of Changed_vint0</summary>
		public bool Changed_vint0_isDone;
		/// <summary>True if Changed_vint0_x has executed. Set this to false to force re-execution of Changed_vint0_x</summary>
		public bool Changed_vint0_x_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'pi'</summary>
		public Dirichlet pi_marginal_F;
		public Dirichlet[] pi_rep_F;
		/// <summary>Message from use of 'pi'</summary>
		public Dirichlet pi_use_B;
		/// <summary>Message to marginal of 't'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> t_marginal_F;
		public Beta[][][] t_rep_F;
		/// <summary>Message from use of 't'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> t_use_B;
		/// <summary>Field backing the vBeta____0 property</summary>
		private Beta[][] vBeta____0_field;
		/// <summary>Message to marginal of 'vBeta____0'</summary>
		public PointMass<Beta[][]> vBeta____0_marginal_F;
		/// <summary>Field backing the vBeta2 property</summary>
		private Beta vBeta2_field;
		/// <summary>The constant 'vDirichlet0'</summary>
		public Dirichlet vDirichlet0;
		/// <summary>Field backing the vDirichlet1 property</summary>
		private Dirichlet vDirichlet1_field;
		/// <summary>Message to marginal of 'vDirichlet1'</summary>
		public PointMass<Dirichlet> vDirichlet1_marginal_F;
		/// <summary>The constant 'vIDistributionLtint__Gt0'</summary>
		public DistributionRefArray<Discrete,int> vIDistributionLtint__Gt0;
		/// <summary>Field backing the vint0 property</summary>
		private int vint0_field;
		/// <summary>Message to marginal of 'vint0'</summary>
		public PointMass<int> vint0_marginal_F;
		/// <summary>Field backing the x property</summary>
		private bool[][] x_field;
		/// <summary>Message to marginal of 'x'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> x_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vBeta____0'</summary>
		public Beta[][] vBeta____0
		{
			get {
				return this.vBeta____0_field;
			}
			set {
				if ((value!=null)&&(value.Length!=7)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+7)+" was expected for variable \'vBeta____0\'");
				}
				this.vBeta____0_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vBeta____0_isDone = false;
				this.Changed_vBeta____0_vBeta2_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isInitialised = false;
				this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vBeta2'</summary>
		public Beta vBeta2
		{
			get {
				return this.vBeta2_field;
			}
			set {
				if (this.vBeta2_field!=value) {
					this.vBeta2_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vBeta____0_vBeta2_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vDirichlet1'</summary>
		public Dirichlet vDirichlet1
		{
			get {
				return this.vDirichlet1_field;
			}
			set {
				this.vDirichlet1_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vDirichlet1_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isInitialised = false;
				this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint0'</summary>
		public int vint0
		{
			get {
				return this.vint0_field;
			}
			set {
				if (this.vint0_field!=value) {
					this.vint0_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vint0_x_isDone = false;
					this.Changed_vint0_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isDone = false;
					this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'x'</summary>
		public bool[][] x
		{
			get {
				return this.x_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.vint0)+" was expected for variable \'x\'");
				}
				this.x_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint0_x_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isInitialised = false;
				this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vBeta____0 and vDirichlet1 and vint0 and x</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone) {
				return ;
			}
			this.pi_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			this.pi_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			Dirichlet[] pi_uses_F;
			Dirichlet[] pi_uses_B;
			// Create array for 'pi_uses' Forwards messages.
			pi_uses_F = new Dirichlet[2];
			// Create array for 'pi_uses' Backwards messages.
			pi_uses_B = new Dirichlet[2];
			pi_uses_B[1] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			pi_uses_B[0] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			pi_uses_F[1] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			// Message to 'pi_uses' from EqualRandom factor
			pi_uses_B[0] = ArrayHelper.SetTo<Dirichlet>(pi_uses_B[0], this.vDirichlet1);
			Dirichlet pi_rep_F_marginal;
			pi_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Dirichlet>(pi_uses_F[1]);
			Dirichlet pi_rep_B_toDef;
			pi_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(pi_uses_F[1]);
			// Message to 'pi_uses' from Replicate factor
			pi_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Dirichlet>(pi_uses_B, this.vDirichlet0, 1, pi_uses_F[1]);
			for(int index0 = 0; index0<this.vint0; index0++) {
				this.c_index0__selector_uses_B[index0][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
			}
			// Create array for replicates of 'c_index0__selector_cases_uses_B'
			Bernoulli[][][] c_index0__selector_cases_uses_B = new Bernoulli[this.vint0][][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for 'c_index0__selector_cases_uses' Backwards messages.
				c_index0__selector_cases_uses_B[index0] = new Bernoulli[7][];
				for(int index1 = 0; index1<7; index1++) {
					// Create array for 'c_index0__selector_cases_uses' Backwards messages.
					c_index0__selector_cases_uses_B[index0][index1] = new Bernoulli[5];
					c_index0__selector_cases_uses_B[index0][index1][3] = Bernoulli.Uniform();
					c_index0__selector_cases_uses_B[index0][index1][2] = Bernoulli.Uniform();
					c_index0__selector_cases_uses_B[index0][index1][1] = Bernoulli.Uniform();
					c_index0__selector_cases_uses_B[index0][index1][0] = Bernoulli.Uniform();
					c_index0__selector_cases_uses_B[index0][index1][4] = Bernoulli.Uniform();
				}
			}
			Beta vBeta0 = Beta.Uniform();
			Beta[][][] t_uses_B;
			// Create array for 't_uses' Backwards messages.
			t_uses_B = new Beta[7][][];
			for(int index1 = 0; index1<7; index1++) {
				// Create array for 't_uses' Backwards messages.
				t_uses_B[index1] = new Beta[10][];
				for(int index2 = 0; index2<10; index2++) {
					// Create array for 't_uses' Backwards messages.
					t_uses_B[index1][index2] = new Beta[2];
					t_uses_B[index1][index2][0] = Beta.Uniform();
					// Message to 't_uses' from EqualRandom factor
					t_uses_B[index1][index2][0] = ArrayHelper.SetTo<Beta>(t_uses_B[index1][index2][0], this.vBeta____0[index1][index2]);
				}
			}
			Beta[][][] t_uses_F;
			// Create array for 't_uses' Forwards messages.
			t_uses_F = new Beta[7][][];
			// Create array for replicates of 't_rep_B_toDef'
			Beta[][] t_rep_B_toDef = new Beta[7][];
			// Create array for replicates of 't_rep_F_marginal'
			Beta[][] t_rep_F_marginal = new Beta[7][];
			for(int index1 = 0; index1<7; index1++) {
				// Create array for 't_uses' Forwards messages.
				t_uses_F[index1] = new Beta[10][];
				// Create array for replicates of 't_rep_F_marginal'
				t_rep_F_marginal[index1] = new Beta[10];
				// Create array for replicates of 't_rep_B_toDef'
				t_rep_B_toDef[index1] = new Beta[10];
				for(int index2 = 0; index2<10; index2++) {
					// Create array for 't_uses' Forwards messages.
					t_uses_F[index1][index2] = new Beta[2];
					t_uses_F[index1][index2][1] = Beta.Uniform();
					t_rep_F_marginal[index1][index2] = ReplicateOp_Divide.MarginalInit<Beta>(t_uses_F[index1][index2][1]);
					t_rep_B_toDef[index1][index2] = ReplicateOp_Divide.ToDefInit<Beta>(t_uses_F[index1][index2][1]);
					// Message to 't_uses' from Replicate factor
					t_uses_F[index1][index2][1] = ReplicateOp_NoDivide.UsesAverageConditional<Beta>(t_uses_B[index1][index2], vBeta0, 1, t_uses_F[index1][index2][1]);
				}
			}
			Discrete c_index0__selector_rep_rep_B_reduced = default(Discrete);
			if (this.vint0>0) {
				c_index0__selector_rep_rep_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
			}
			DistributionRefArray<Discrete,int> c_F;
			// Create array for 'c' Forwards messages.
			c_F = new DistributionRefArray<Discrete,int>(this.vint0);
			for(int index0 = 0; index0<this.vint0; index0++) {
				c_F[index0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
			}
			// Create array for replicates of 'c_index0__selector_uses_F'
			Discrete[][] c_index0__selector_uses_F = new Discrete[this.vint0][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for 'c_index0__selector_uses' Forwards messages.
				c_index0__selector_uses_F[index0] = new Discrete[2];
				c_index0__selector_uses_F[index0][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
			}
			// Create array for replicates of 'c_index0__selector_rep_F_marginal'
			Discrete[] c_index0__selector_rep_F_marginal = new Discrete[this.vint0];
			for(int index0 = 0; index0<this.vint0; index0++) {
				c_index0__selector_rep_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Discrete>(c_index0__selector_uses_F[index0][1]);
			}
			// Create array for replicates of 'c_index0__selector_rep_B_toDef'
			Discrete[] c_index0__selector_rep_B_toDef = new Discrete[this.vint0];
			for(int index0 = 0; index0<this.vint0; index0++) {
				c_index0__selector_rep_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Discrete>(c_index0__selector_uses_F[index0][1]);
			}
			// Create array for replicates of 'c_index0__selector_rep_F'
			Discrete[][] c_index0__selector_rep_F = new Discrete[this.vint0][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for 'c_index0__selector_rep' Forwards messages.
				c_index0__selector_rep_F[index0] = new Discrete[7];
				for(int index1 = 0; index1<7; index1++) {
					c_index0__selector_rep_F[index0][index1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
				}
			}
			// Create array for replicates of 'c_index0__selector_rep_rep_B_toDef'
			Discrete[][] c_index0__selector_rep_rep_B_toDef = new Discrete[this.vint0][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for replicates of 'c_index0__selector_rep_rep_B_toDef'
				c_index0__selector_rep_rep_B_toDef[index0] = new Discrete[7];
				for(int index1 = 0; index1<7; index1++) {
					c_index0__selector_rep_rep_B_toDef[index0][index1] = ReplicateOp_Divide.ToDefInit<Discrete>(c_index0__selector_rep_F[index0][index1]);
				}
			}
			// Create array for replicates of 'c_index0__selector_rep_rep_F_marginal'
			Discrete[][] c_index0__selector_rep_rep_F_marginal = new Discrete[this.vint0][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for replicates of 'c_index0__selector_rep_rep_F_marginal'
				c_index0__selector_rep_rep_F_marginal[index0] = new Discrete[7];
				for(int index1 = 0; index1<7; index1++) {
					c_index0__selector_rep_rep_F_marginal[index0][index1] = ReplicateOp_Divide.MarginalInit<Discrete>(c_index0__selector_rep_F[index0][index1]);
				}
			}
			// Create array for replicates of 'c_index0__selector_rep_rep_F'
			Discrete[][][] c_index0__selector_rep_rep_F = new Discrete[this.vint0][][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for replicates of 'c_index0__selector_rep_rep_F'
				c_index0__selector_rep_rep_F[index0] = new Discrete[7][];
				for(int index1 = 0; index1<7; index1++) {
					// Create array for 'c_index0__selector_rep_rep' Forwards messages.
					c_index0__selector_rep_rep_F[index0][index1] = new Discrete[10];
					for(int index2 = 0; index2<10; index2++) {
						c_index0__selector_rep_rep_F[index0][index1][index2] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
					}
				}
			}
			DistributionStructArray<Beta,double>[] t_index1__B_reduced = new DistributionStructArray<Beta,double>[this.vint0];
			for(int index0 = 0; index0<this.vint0; index0++) {
				t_index1__B_reduced[index0] = default(DistributionStructArray<Beta,double>);
				// Create array for 't_index1_' Backwards messages.
				t_index1__B_reduced[index0] = new DistributionStructArray<Beta,double>(10);
				for(int index2 = 0; index2<10; index2++) {
					t_index1__B_reduced[index0][index2] = Beta.Uniform();
					// Message to 't_index1_' from Bernoulli factor
					t_index1__B_reduced[index0][index2] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.x[index0][index2]);
				}
			}
			// Create array for replicates of 't_rep_B'
			Beta[][][] t_rep_B = new Beta[7][][];
			for(int index1 = 0; index1<7; index1++) {
				// Create array for replicates of 't_rep_B'
				t_rep_B[index1] = new Beta[10][];
				for(int index2 = 0; index2<10; index2++) {
					// Create array for 't_rep' Backwards messages.
					t_rep_B[index1][index2] = new Beta[this.vint0];
				}
			}
			for(int index0 = 0; index0<this.vint0; index0++) {
				for(int index1 = 0; index1<7; index1++) {
					for(int index2 = 0; index2<10; index2++) {
						t_rep_B[index1][index2][index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'c_index0__selector_cases_rep2_B'
			Bernoulli[][][] c_index0__selector_cases_rep2_B = new Bernoulli[this.vint0][][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for replicates of 'c_index0__selector_cases_rep2_B'
				c_index0__selector_cases_rep2_B[index0] = new Bernoulli[7][];
				for(int index1 = 0; index1<7; index1++) {
					// Create array for 'c_index0__selector_cases_rep2' Backwards messages.
					c_index0__selector_cases_rep2_B[index0][index1] = new Bernoulli[10];
					for(int index2 = 0; index2<10; index2++) {
						c_index0__selector_cases_rep2_B[index0][index1][index2] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'c_index0__selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[] c_index0__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.vint0];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for 'c_index0__selector_cases' Backwards messages.
				c_index0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(7);
				for(int index1 = 0; index1<7; index1++) {
					c_index0__selector_cases_B[index0][index1] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'c_index0__selector_B'
			Discrete[] c_index0__selector_B = new Discrete[this.vint0];
			for(int index0 = 0; index0<this.vint0; index0++) {
				c_index0__selector_B[index0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
			}
			Dirichlet[] pi_rep_B;
			// Create array for 'pi_rep' Backwards messages.
			pi_rep_B = new Dirichlet[this.vint0];
			for(int index0 = 0; index0<this.vint0; index0++) {
				pi_rep_B[index0] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<this.vint0; index0++) {
					// Message to 'c_index0__selector_uses' from Replicate factor
					c_index0__selector_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Discrete>(this.c_index0__selector_uses_B[index0], this.c_use_F[index0], 1, c_index0__selector_uses_F[index0][1]);
					c_index0__selector_rep_F_marginal[index0] = ReplicateOp_Divide.Marginal<Discrete>(c_index0__selector_rep_B_toDef[index0], c_index0__selector_uses_F[index0][1], c_index0__selector_rep_F_marginal[index0]);
					for(int index1 = 0; index1<7; index1++) {
						// Message to 'c_index0__selector_rep' from Replicate factor
						c_index0__selector_rep_F[index0][index1] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(c_index0__selector_rep_rep_B_toDef[index0][index1], c_index0__selector_rep_F_marginal[index0], index1, c_index0__selector_rep_F[index0][index1]);
						c_index0__selector_rep_rep_F_marginal[index0][index1] = ReplicateOp_Divide.Marginal<Discrete>(c_index0__selector_rep_rep_B_toDef[index0][index1], c_index0__selector_rep_F[index0][index1], c_index0__selector_rep_rep_F_marginal[index0][index1]);
						for(int index2 = 0; index2<10; index2++) {
							// Message to 'c_index0__selector_rep_rep' from Replicate factor
							c_index0__selector_rep_rep_F[index0][index1][index2] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(c_index0__selector_rep_rep_B_reduced, c_index0__selector_rep_rep_F_marginal[index0][index1], index2, c_index0__selector_rep_rep_F[index0][index1][index2]);
							// Message to 't_rep' from EnterOne factor
							t_rep_B[index1][index2][index0] = GateEnterOneOp<double>.ValueAverageConditional<Beta>(t_index1__B_reduced[index0][index2], c_index0__selector_rep_rep_F[index0][index1][index2], this.t_rep_F[index1][index2][index0], index1, t_rep_B[index1][index2][index0]);
						}
					}
				}
				for(int index1 = 0; index1<7; index1++) {
					for(int index2 = 0; index2<10; index2++) {
						t_rep_B_toDef[index1][index2] = ReplicateOp_Divide.ToDef<Beta>(t_rep_B[index1][index2], t_rep_B_toDef[index1][index2]);
						t_rep_F_marginal[index1][index2] = ReplicateOp_Divide.Marginal<Beta>(t_rep_B_toDef[index1][index2], t_uses_F[index1][index2][1], t_rep_F_marginal[index1][index2]);
					}
				}
				for(int index0 = 0; index0<this.vint0; index0++) {
					for(int index1 = 0; index1<7; index1++) {
						for(int index2 = 0; index2<10; index2++) {
							// Message to 't_rep' from Replicate factor
							this.t_rep_F[index1][index2][index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(t_rep_B[index1][index2][index0], t_rep_F_marginal[index1][index2], index0, this.t_rep_F[index1][index2][index0]);
							// Message to 'c_index0__selector_cases_rep2' from Bernoulli factor
							c_index0__selector_cases_rep2_B[index0][index1][index2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.x[index0][index2], this.t_rep_F[index1][index2][index0]));
						}
						// Message to 'c_index0__selector_cases_uses' from Replicate factor
						c_index0__selector_cases_uses_B[index0][index1][4] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(c_index0__selector_cases_rep2_B[index0][index1], c_index0__selector_cases_uses_B[index0][index1][4]);
						// Message to 'c_index0__selector_cases' from Replicate factor
						c_index0__selector_cases_B[index0][index1] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(c_index0__selector_cases_uses_B[index0][index1], c_index0__selector_cases_B[index0][index1]);
					}
					// Message to 'c_index0__selector_uses' from CasesInt factor
					this.c_index0__selector_uses_B[index0][0] = IntCasesOp.IAverageConditional(c_index0__selector_cases_B[index0], this.c_index0__selector_uses_B[index0][0]);
					// Message to 'c_index0__selector' from Replicate factor
					c_index0__selector_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Discrete>(this.c_index0__selector_uses_B[index0], c_index0__selector_B[index0]);
					// Message to 'pi_rep' from Discrete factor
					pi_rep_B[index0] = DiscreteFromDirichletOp.ProbsAverageConditional(c_index0__selector_B[index0], this.pi_rep_F[index0], pi_rep_B[index0]);
				}
				pi_rep_B_toDef = ReplicateOp_Divide.ToDef<Dirichlet>(pi_rep_B, pi_rep_B_toDef);
				pi_rep_F_marginal = ReplicateOp_Divide.Marginal<Dirichlet>(pi_rep_B_toDef, pi_uses_F[1], pi_rep_F_marginal);
				for(int index0 = 0; index0<this.vint0; index0++) {
					// Message to 'pi_rep' from Replicate factor
					this.pi_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(pi_rep_B[index0], pi_rep_F_marginal, index0, this.pi_rep_F[index0]);
					// Message to 'c' from Discrete factor
					c_F[index0] = DiscreteFromDirichletOp.SampleAverageConditional(this.pi_rep_F[index0], c_F[index0]);
					// Message to 'c_use' from Variable factor
					this.c_use_F[index0] = ArrayHelper.SetTo<Discrete>(this.c_use_F[index0], c_F[index0]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'pi_uses' from Replicate factor
			pi_uses_B[1] = ArrayHelper.SetTo<Dirichlet>(pi_uses_B[1], pi_rep_B_toDef);
			// Message to 'pi_use' from Replicate factor
			this.pi_use_B = ReplicateOp_NoDivide.DefAverageConditional<Dirichlet>(pi_uses_B, this.pi_use_B);
			// Message to 'pi_marginal' from Variable factor
			this.pi_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(this.pi_use_B, this.vDirichlet0, this.pi_marginal_F);
			// Create array for 't_marginal' Forwards messages.
			this.t_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(7);
			// Create array for 't_use' Backwards messages.
			this.t_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(7);
			for(int index1 = 0; index1<7; index1++) {
				// Create array for 't_use' Backwards messages.
				this.t_use_B[index1] = new DistributionStructArray<Beta,double>(10);
				for(int index2 = 0; index2<10; index2++) {
					this.t_use_B[index1][index2] = Beta.Uniform();
					t_uses_B[index1][index2][1] = Beta.Uniform();
					// Message to 't_uses' from Replicate factor
					t_uses_B[index1][index2][1] = ArrayHelper.SetTo<Beta>(t_uses_B[index1][index2][1], t_rep_B_toDef[index1][index2]);
					// Message to 't_use' from Replicate factor
					this.t_use_B[index1][index2] = ReplicateOp_NoDivide.DefAverageConditional<Beta>(t_uses_B[index1][index2], this.t_use_B[index1][index2]);
				}
				// Create array for 't_marginal' Forwards messages.
				this.t_marginal_F[index1] = new DistributionStructArray<Beta,double>(10);
				for(int index2 = 0; index2<10; index2++) {
					this.t_marginal_F[index1][index2] = Beta.Uniform();
					// Message to 't_marginal' from Variable factor
					this.t_marginal_F[index1][index2] = VariableOp.MarginalAverageConditional<Beta>(this.t_use_B[index1][index2], vBeta0, this.t_marginal_F[index1][index2]);
				}
			}
			// Create array for 'c_marginal' Forwards messages.
			this.c_marginal_F = new DistributionRefArray<Discrete,int>(this.vint0);
			for(int index0 = 0; index0<this.vint0; index0++) {
				this.c_marginal_F[index0] = ArrayHelper.MakeCopy<Discrete>(this.vIDistributionLtint__Gt0[index0]);
				// Message to 'c_marginal' from Variable factor
				this.c_marginal_F[index0] = VariableOp.MarginalAverageConditional<Discrete>(c_index0__selector_B[index0], c_F[index0], this.c_marginal_F[index0]);
			}
			this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vint0 and must reset on changes to vBeta____0 and vDirichlet1 and x</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.vint0; index0++) {
				this.pi_rep_F[index0] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
				this.c_index0__selector_uses_B[index0][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(7));
				this.c_use_F[index0] = ArrayHelper.MakeCopy<Discrete>(this.vIDistributionLtint__Gt0[index0]);
				for(int index1 = 0; index1<7; index1++) {
					for(int index2 = 0; index2<10; index2++) {
						this.t_rep_F[index1][index2][index0] = Beta.Uniform();
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isDone = true;
			this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vBeta____0</summary>
		private void Changed_vBeta____0()
		{
			if (this.Changed_vBeta____0_isDone) {
				return ;
			}
			// Create array for 'vBeta____0_marginal' Forwards messages.
			this.vBeta____0_marginal_F = new PointMass<Beta[][]>(this.vBeta____0);
			// Message to 'vBeta____0_marginal' from DerivedVariable factor
			this.vBeta____0_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Beta[][]>,Beta[][]>(this.vBeta____0, this.vBeta____0_marginal_F);
			this.Changed_vBeta____0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vBeta____0 and vBeta2</summary>
		private void Changed_vBeta____0_vBeta2()
		{
			if (this.Changed_vBeta____0_vBeta2_isDone) {
				return ;
			}
			for(int index1 = 0; index1<7; index1++) {
				for(int index2 = 0; index2<10; index2++) {
					Constrain.Equal<Beta>(this.vBeta____0[index1][index2], Clone.Copy<Beta>(this.vBeta2));
				}
			}
			this.Changed_vBeta____0_vBeta2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vDirichlet1</summary>
		private void Changed_vDirichlet1()
		{
			if (this.Changed_vDirichlet1_isDone) {
				return ;
			}
			this.vDirichlet1_marginal_F = new PointMass<Dirichlet>(this.vDirichlet1);
			// Message to 'vDirichlet1_marginal' from DerivedVariable factor
			this.vDirichlet1_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.vDirichlet1, this.vDirichlet1_marginal_F);
			this.Changed_vDirichlet1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint0</summary>
		private void Changed_vint0()
		{
			if (this.Changed_vint0_isDone) {
				return ;
			}
			// Create array for 'pi_rep' Forwards messages.
			this.pi_rep_F = new Dirichlet[this.vint0];
			// Create array for replicates of 'c_index0__selector_uses_B'
			this.c_index0__selector_uses_B = new Discrete[this.vint0][];
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for 'c_index0__selector_uses' Backwards messages.
				this.c_index0__selector_uses_B[index0] = new Discrete[2];
			}
			// Create array for 'c_use' Forwards messages.
			this.c_use_F = new DistributionRefArray<Discrete,int>(this.vint0);
			for(int index1 = 0; index1<7; index1++) {
				for(int index2 = 0; index2<10; index2++) {
					// Create array for 't_rep' Forwards messages.
					this.t_rep_F[index1][index2] = new Beta[this.vint0];
				}
			}
			this.vint0_marginal_F = new PointMass<int>(this.vint0);
			// Message to 'vint0_marginal' from DerivedVariable factor
			this.vint0_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.vint0, this.vint0_marginal_F);
			this.Changed_vint0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint0 and x</summary>
		private void Changed_vint0_x()
		{
			if (this.Changed_vint0_x_isDone) {
				return ;
			}
			// Create array for 'x_marginal' Forwards messages.
			this.x_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.vint0);
			for(int index0 = 0; index0<this.vint0; index0++) {
				// Create array for 'x_marginal' Forwards messages.
				this.x_marginal_F[index0] = new DistributionStructArray<Bernoulli,bool>(10);
				for(int index2 = 0; index2<10; index2++) {
					this.x_marginal_F[index0][index2] = Bernoulli.Uniform();
				}
			}
			// Message to 'x_marginal' from DerivedVariable factor
			this.x_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.x, this.x_marginal_F);
			this.Changed_vint0_x_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'c' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> CMarginal()
		{
			return this.c_marginal_F;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vDirichlet0 = Dirichlet.Uniform(7, Sparsity.FromSpec(StorageType.Dense, 0.0, 0));
			this.vIDistributionLtint__Gt0 = new DistributionRefArray<Discrete,int>(new Discrete[200] {Discrete.PointMass(3, 7), Discrete.PointMass(1, 7), Discrete.PointMass(5, 7), Discrete.PointMass(4, 7), Discrete.PointMass(3, 7), Discrete.PointMass(0, 7), Discrete.PointMass(1, 7), Discrete.PointMass(3, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(4, 7), Discrete.PointMass(4, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(3, 7), Discrete.PointMass(6, 7), Discrete.PointMass(0, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(3, 7), Discrete.PointMass(6, 7), Discrete.PointMass(0, 7), Discrete.PointMass(5, 7), Discrete.PointMass(6, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(2, 7), Discrete.PointMass(3, 7), Discrete.PointMass(0, 7), Discrete.PointMass(0, 7), Discrete.PointMass(4, 7), Discrete.PointMass(1, 7), Discrete.PointMass(5, 7), Discrete.PointMass(1, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(0, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(5, 7), Discrete.PointMass(1, 7), Discrete.PointMass(1, 7), Discrete.PointMass(5, 7), Discrete.PointMass(4, 7), Discrete.PointMass(4, 7), Discrete.PointMass(5, 7), Discrete.PointMass(3, 7), Discrete.PointMass(1, 7), Discrete.PointMass(4, 7), Discrete.PointMass(0, 7), Discrete.PointMass(0, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(5, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(0, 7), Discrete.PointMass(6, 7), Discrete.PointMass(5, 7), Discrete.PointMass(6, 7), Discrete.PointMass(2, 7), Discrete.PointMass(1, 7), Discrete.PointMass(4, 7), Discrete.PointMass(1, 7), Discrete.PointMass(1, 7), Discrete.PointMass(3, 7), Discrete.PointMass(6, 7), Discrete.PointMass(1, 7), Discrete.PointMass(0, 7), Discrete.PointMass(4, 7), Discrete.PointMass(3, 7), Discrete.PointMass(0, 7), Discrete.PointMass(1, 7), Discrete.PointMass(3, 7), Discrete.PointMass(4, 7), Discrete.PointMass(4, 7), Discrete.PointMass(5, 7), Discrete.PointMass(1, 7), Discrete.PointMass(4, 7), Discrete.PointMass(0, 7), Discrete.PointMass(6, 7), Discrete.PointMass(3, 7), Discrete.PointMass(3, 7), Discrete.PointMass(1, 7), Discrete.PointMass(2, 7), Discrete.PointMass(1, 7), Discrete.PointMass(3, 7), Discrete.PointMass(2, 7), Discrete.PointMass(1, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(1, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(0, 7), Discrete.PointMass(3, 7), Discrete.PointMass(2, 7), Discrete.PointMass(1, 7), Discrete.PointMass(4, 7), Discrete.PointMass(6, 7), Discrete.PointMass(3, 7), Discrete.PointMass(3, 7), Discrete.PointMass(3, 7), Discrete.PointMass(2, 7), Discrete.PointMass(5, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(1, 7), Discrete.PointMass(1, 7), Discrete.PointMass(6, 7), Discrete.PointMass(1, 7), Discrete.PointMass(5, 7), Discrete.PointMass(0, 7), Discrete.PointMass(5, 7), Discrete.PointMass(5, 7), Discrete.PointMass(3, 7), Discrete.PointMass(5, 7), Discrete.PointMass(0, 7), Discrete.PointMass(0, 7), Discrete.PointMass(4, 7), Discrete.PointMass(0, 7), Discrete.PointMass(4, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(2, 7), Discrete.PointMass(3, 7), Discrete.PointMass(5, 7), Discrete.PointMass(4, 7), Discrete.PointMass(2, 7), Discrete.PointMass(5, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(6, 7), Discrete.PointMass(0, 7), Discrete.PointMass(4, 7), Discrete.PointMass(0, 7), Discrete.PointMass(3, 7), Discrete.PointMass(0, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(1, 7), Discrete.PointMass(3, 7), Discrete.PointMass(5, 7), Discrete.PointMass(3, 7), Discrete.PointMass(5, 7), Discrete.PointMass(1, 7), Discrete.PointMass(0, 7), Discrete.PointMass(3, 7), Discrete.PointMass(4, 7), Discrete.PointMass(2, 7), Discrete.PointMass(1, 7), Discrete.PointMass(0, 7), Discrete.PointMass(6, 7), Discrete.PointMass(5, 7), Discrete.PointMass(1, 7), Discrete.PointMass(1, 7), Discrete.PointMass(2, 7), Discrete.PointMass(2, 7), Discrete.PointMass(6, 7), Discrete.PointMass(1, 7), Discrete.PointMass(3, 7), Discrete.PointMass(6, 7), Discrete.PointMass(0, 7), Discrete.PointMass(5, 7), Discrete.PointMass(2, 7), Discrete.PointMass(0, 7), Discrete.PointMass(5, 7), Discrete.PointMass(5, 7), Discrete.PointMass(5, 7), Discrete.PointMass(4, 7), Discrete.PointMass(4, 7), Discrete.PointMass(6, 7), Discrete.PointMass(1, 7), Discrete.PointMass(0, 7), Discrete.PointMass(3, 7), Discrete.PointMass(6, 7), Discrete.PointMass(3, 7), Discrete.PointMass(3, 7), Discrete.PointMass(3, 7), Discrete.PointMass(2, 7), Discrete.PointMass(4, 7), Discrete.PointMass(1, 7), Discrete.PointMass(4, 7)});
			// Create array for replicates of 't_rep_F'
			this.t_rep_F = new Beta[7][][];
			for(int index1 = 0; index1<7; index1++) {
				// Create array for replicates of 't_rep_F'
				this.t_rep_F[index1] = new Beta[10][];
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x_isDone = false;
				}
				this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x_isDone = false;
			}
			this.Changed_vBeta____0();
			this.Changed_vDirichlet1();
			this.Changed_vint0_x();
			this.Changed_vBeta____0_vBeta2();
			this.Constant();
			this.Changed_vint0();
			this.Changed_numberOfIterationsDecreased_vint0_Init_vBeta____0_vDirichlet1_x(initialise);
			this.Changed_numberOfIterations_vBeta____0_vDirichlet1_vint0_x(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vint0") {
				return this.vint0;
			}
			if (variableName=="x") {
				return this.x;
			}
			if (variableName=="vDirichlet1") {
				return this.vDirichlet1;
			}
			if (variableName=="vBeta____0") {
				return this.vBeta____0;
			}
			if (variableName=="vBeta2") {
				return this.vBeta2;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vBeta____0") {
				return this.VBeta____0Marginal();
			}
			if (variableName=="vDirichlet1") {
				return this.VDirichlet1Marginal();
			}
			if (variableName=="x") {
				return this.XMarginal();
			}
			if (variableName=="vint0") {
				return this.Vint0Marginal();
			}
			if (variableName=="pi") {
				return this.PiMarginal();
			}
			if (variableName=="c") {
				return this.CMarginal();
			}
			if (variableName=="t") {
				return this.TMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="pi")&&(query=="MarginalDividedByPrior")) {
				return this.PiMarginalDividedByPrior();
			}
			if ((variableName=="t")&&(query=="MarginalDividedByPrior")) {
				return this.TMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'pi' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PiMarginal()
		{
			return this.pi_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'pi' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public Dirichlet PiMarginalDividedByPrior()
		{
			return this.pi_use_B;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vint0") {
				this.vint0 = (int)value;
				return ;
			}
			if (variableName=="x") {
				this.x = (bool[][])value;
				return ;
			}
			if (variableName=="vDirichlet1") {
				this.vDirichlet1 = (Dirichlet)value;
				return ;
			}
			if (variableName=="vBeta____0") {
				this.vBeta____0 = (Beta[][])value;
				return ;
			}
			if (variableName=="vBeta2") {
				this.vBeta2 = (Beta)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 't' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> TMarginal()
		{
			return this.t_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 't' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> TMarginalDividedByPrior()
		{
			return this.t_use_B;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vBeta____0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> VBeta____0Marginal()
		{
			return this.vBeta____0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vDirichlet1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> VDirichlet1Marginal()
		{
			return this.vDirichlet1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint0Marginal()
		{
			return this.vint0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'x' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> XMarginal()
		{
			return this.x_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
